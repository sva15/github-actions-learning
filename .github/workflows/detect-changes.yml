name: Detect Directory Changes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ui-changed: ${{ steps.changes.outputs.ui }}
      any-changes: ${{ steps.changes.outputs.any-changes }}
      changed-subdirs: ${{ steps.changes.outputs.changed-subdirs }}
      changed-services: ${{ steps.changes.outputs.changed-services }}
      changed-agents: ${{ steps.changes.outputs.changed-agents }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Fetch current commit and parent
    
    - name: Detect changed directories
      id: changes
      run: |
        # For pull requests, compare against the target branch
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          echo "Comparing PR: $BASE_SHA..$HEAD_SHA"
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
        else
          # For push events, compare HEAD with HEAD~1
          echo "Comparing push: HEAD~1..HEAD"
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        echo "---"
        
        # Initialize arrays for changed subdirectories
        UI_CHANGED=false
        CHANGED_SUBDIRS=""
        CHANGED_SERVICES=""
        CHANGED_AGENTS=""
        
        # Check each changed file against our target directories
        while IFS= read -r file; do
          if [[ -n "$file" ]]; then
            echo "Checking file: $file"
            
            # Check backend/services/*/*
            if [[ "$file" == backend/services/*/* ]]; then
              # Extract the specific service directory (second level)
              SERVICE_DIR=$(echo "$file" | cut -d'/' -f3)
              FULL_SERVICE_PATH="backend/services/$SERVICE_DIR"
              echo "  -> Service changed: $FULL_SERVICE_PATH"
              
              if [[ "$CHANGED_SUBDIRS" != *"$FULL_SERVICE_PATH"* ]]; then
                CHANGED_SUBDIRS="${CHANGED_SUBDIRS:+$CHANGED_SUBDIRS,}$FULL_SERVICE_PATH"
              fi
              if [[ "$CHANGED_SERVICES" != *"$SERVICE_DIR"* ]]; then
                CHANGED_SERVICES="${CHANGED_SERVICES:+$CHANGED_SERVICES,}$SERVICE_DIR"
              fi
            fi
            
            # Check backend/agents/*/*
            if [[ "$file" == backend/agents/*/* ]]; then
              # Extract the specific agent directory (second level)
              AGENT_DIR=$(echo "$file" | cut -d'/' -f3)
              FULL_AGENT_PATH="backend/agents/$AGENT_DIR"
              echo "  -> Agent changed: $FULL_AGENT_PATH"
              
              if [[ "$CHANGED_SUBDIRS" != *"$FULL_AGENT_PATH"* ]]; then
                CHANGED_SUBDIRS="${CHANGED_SUBDIRS:+$CHANGED_SUBDIRS,}$FULL_AGENT_PATH"
              fi
              if [[ "$CHANGED_AGENTS" != *"$AGENT_DIR"* ]]; then
                CHANGED_AGENTS="${CHANGED_AGENTS:+$CHANGED_AGENTS,}$AGENT_DIR"
              fi
            fi
            
            # Check ui/
            if [[ "$file" == ui/* ]]; then
              echo "  -> UI changed"
              UI_CHANGED=true
              if [[ "$CHANGED_SUBDIRS" != *"ui"* ]]; then
                CHANGED_SUBDIRS="${CHANGED_SUBDIRS:+$CHANGED_SUBDIRS,}ui"
              fi
            fi
          fi
        done <<< "$CHANGED_FILES"
        
        # Determine if any relevant changes occurred
        ANY_CHANGES=false
        if [[ -n "$CHANGED_SERVICES" || -n "$CHANGED_AGENTS" || "$UI_CHANGED" == "true" ]]; then
          ANY_CHANGES=true
        fi
        
        # Output results
        echo "Results:"
        echo "  UI Changed: $UI_CHANGED"
        echo "  Any Changes: $ANY_CHANGES"
        echo "  Changed Subdirectories: $CHANGED_SUBDIRS"
        echo "  Changed Services: $CHANGED_SERVICES"
        echo "  Changed Agents: $CHANGED_AGENTS"
        
        # Set outputs for other jobs
        echo "ui=$UI_CHANGED" >> $GITHUB_OUTPUT
        echo "any-changes=$ANY_CHANGES" >> $GITHUB_OUTPUT
        echo "changed-subdirs=$CHANGED_SUBDIRS" >> $GITHUB_OUTPUT
        echo "changed-services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
        echo "changed-agents=$CHANGED_AGENTS" >> $GITHUB_OUTPUT

  # Example jobs that run conditionally based on detected changes
  backend-services-job:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-services != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run backend services tasks
      run: |
        echo "Running tasks for changed services"
        echo "Changed subdirectories: ${{ needs.detect-changes.outputs.changed-subdirs }}"
        echo "Specific changed services: ${{ needs.detect-changes.outputs.changed-services }}"
        # Add your backend services specific tasks here
        # You can now target specific services using the changed-services output
        # e.g., run tests, build, deploy, etc.

  backend-agents-job:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.changed-agents != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run backend agents tasks
      run: |
        echo "Running tasks for changed agents"
        echo "Changed subdirectories: ${{ needs.detect-changes.outputs.changed-subdirs }}"
        echo "Specific changed agents: ${{ needs.detect-changes.outputs.changed-agents }}"
        # Add your backend agents specific tasks here
        # You can now target specific agents using the changed-agents output

  ui-job:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.ui-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run UI tasks
      run: |
        echo "Running tasks for UI"
        echo "Changed directories: ${{ needs.detect-changes.outputs.changed-dirs }}"
        # Add your UI specific tasks here

  # Job that runs only if any relevant changes are detected
  deploy-job:
    needs: [detect-changes, backend-services-job, backend-agents-job, ui-job]
    runs-on: ubuntu-latest
    if: always() && needs.detect-changes.outputs.any-changes == 'true'
    
    steps:
    - name: Deploy changes
      run: |
        echo "Deploying changes for subdirectories: ${{ needs.detect-changes.outputs.changed-subdirs }}"
        # Add deployment logic here

  # Job that runs when no relevant changes are detected
  no-changes-job:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-changes == 'false'
    
    steps:
    - name: No relevant changes
      run: |
        echo "No changes detected in monitored directories (backend/services, backend/agents, ui)"
        echo "Skipping pipeline execution"
